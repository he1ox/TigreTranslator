// Generated from C:/Users/georg/IdeaProjects/TigreTranslator/src\Spanish.g4 by ANTLR 4.12.0
package Spanish;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class SpanishLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.12.0", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ARTICLE=1, ADJECTIVE=2, NOUN=3, VERB=4, PREPOSITION=5, ADVERB=6, POSSESSIVE_PRONOUN=7, 
		NUMERAL=8, PUNCTUATION=9, WS=10;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"ARTICLE", "ADJECTIVE", "NOUN", "VERB", "PREPOSITION", "ADVERB", "POSSESSIVE_PRONOUN", 
			"NUMERAL", "PUNCTUATION", "WS"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "ARTICLE", "ADJECTIVE", "NOUN", "VERB", "PREPOSITION", "ADVERB", 
			"POSSESSIVE_PRONOUN", "NUMERAL", "PUNCTUATION", "WS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public SpanishLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Spanish.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000\n\u00ba\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002\u0001"+
		"\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004"+
		"\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007"+
		"\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
		"\u0000\u0003\u0000\u001f\b\u0000\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0003\u00017\b\u0001\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0003\u0002M\b"+
		"\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001"+
		"\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001"+
		"\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0003\u0003^\b\u0003\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0003"+
		"\u0004r\b\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001"+
		"\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001"+
		"\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001"+
		"\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001"+
		"\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001"+
		"\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0003"+
		"\u0005\u0096\b\u0005\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001"+
		"\u0006\u0001\u0006\u0003\u0006\u009e\b\u0006\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0003\u0007\u00b0\b\u0007\u0001\b\u0001\b\u0001\t\u0004"+
		"\t\u00b5\b\t\u000b\t\f\t\u00b6\u0001\t\u0001\t\u0000\u0000\n\u0001\u0001"+
		"\u0003\u0002\u0005\u0003\u0007\u0004\t\u0005\u000b\u0006\r\u0007\u000f"+
		"\b\u0011\t\u0013\n\u0001\u0000\u0002\u0003\u0000,,..;;\u0003\u0000\t\n"+
		"\r\r  \u00cf\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0003\u0001\u0000"+
		"\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0000\u0000\u0007\u0001\u0000"+
		"\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000\u0000\u000b\u0001\u0000\u0000"+
		"\u0000\u0000\r\u0001\u0000\u0000\u0000\u0000\u000f\u0001\u0000\u0000\u0000"+
		"\u0000\u0011\u0001\u0000\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0000"+
		"\u0001\u001e\u0001\u0000\u0000\u0000\u00036\u0001\u0000\u0000\u0000\u0005"+
		"L\u0001\u0000\u0000\u0000\u0007]\u0001\u0000\u0000\u0000\tq\u0001\u0000"+
		"\u0000\u0000\u000b\u0095\u0001\u0000\u0000\u0000\r\u009d\u0001\u0000\u0000"+
		"\u0000\u000f\u00af\u0001\u0000\u0000\u0000\u0011\u00b1\u0001\u0000\u0000"+
		"\u0000\u0013\u00b4\u0001\u0000\u0000\u0000\u0015\u0016\u0005e\u0000\u0000"+
		"\u0016\u001f\u0005l\u0000\u0000\u0017\u0018\u0005l\u0000\u0000\u0018\u001f"+
		"\u0005a\u0000\u0000\u0019\u001a\u0005u\u0000\u0000\u001a\u001f\u0005n"+
		"\u0000\u0000\u001b\u001c\u0005u\u0000\u0000\u001c\u001d\u0005n\u0000\u0000"+
		"\u001d\u001f\u0005a\u0000\u0000\u001e\u0015\u0001\u0000\u0000\u0000\u001e"+
		"\u0017\u0001\u0000\u0000\u0000\u001e\u0019\u0001\u0000\u0000\u0000\u001e"+
		"\u001b\u0001\u0000\u0000\u0000\u001f\u0002\u0001\u0000\u0000\u0000 !\u0005"+
		"g\u0000\u0000!\"\u0005r\u0000\u0000\"#\u0005a\u0000\u0000#$\u0005n\u0000"+
		"\u0000$%\u0005d\u0000\u0000%7\u0005e\u0000\u0000&\'\u0005p\u0000\u0000"+
		"\'(\u0005e\u0000\u0000()\u0005q\u0000\u0000)*\u0005u\u0000\u0000*+\u0005"+
		"e\u0000\u0000+,\u0005\u00c3\u0000\u0000,-\u0005\u00b1\u0000\u0000-7\u0005"+
		"o\u0000\u0000./\u0005a\u0000\u0000/0\u0005l\u0000\u000001\u0005t\u0000"+
		"\u000017\u0005o\u0000\u000023\u0005b\u0000\u000034\u0005a\u0000\u0000"+
		"45\u0005j\u0000\u000057\u0005o\u0000\u00006 \u0001\u0000\u0000\u00006"+
		"&\u0001\u0000\u0000\u00006.\u0001\u0000\u0000\u000062\u0001\u0000\u0000"+
		"\u00007\u0004\u0001\u0000\u0000\u000089\u0005p\u0000\u00009:\u0005e\u0000"+
		"\u0000:;\u0005r\u0000\u0000;<\u0005r\u0000\u0000<M\u0005o\u0000\u0000"+
		"=>\u0005g\u0000\u0000>?\u0005a\u0000\u0000?@\u0005t\u0000\u0000@M\u0005"+
		"o\u0000\u0000AB\u0005p\u0000\u0000BC\u0005\u00c3\u0000\u0000CD\u0005\u00a1"+
		"\u0000\u0000DE\u0005j\u0000\u0000EF\u0005a\u0000\u0000FG\u0005r\u0000"+
		"\u0000GM\u0005o\u0000\u0000HI\u0005c\u0000\u0000IJ\u0005a\u0000\u0000"+
		"JK\u0005s\u0000\u0000KM\u0005a\u0000\u0000L8\u0001\u0000\u0000\u0000L"+
		"=\u0001\u0000\u0000\u0000LA\u0001\u0000\u0000\u0000LH\u0001\u0000\u0000"+
		"\u0000M\u0006\u0001\u0000\u0000\u0000NO\u0005c\u0000\u0000OP\u0005o\u0000"+
		"\u0000PQ\u0005r\u0000\u0000QR\u0005r\u0000\u0000R^\u0005e\u0000\u0000"+
		"ST\u0005s\u0000\u0000TU\u0005a\u0000\u0000UV\u0005l\u0000\u0000VW\u0005"+
		"t\u0000\u0000W^\u0005a\u0000\u0000XY\u0005v\u0000\u0000YZ\u0005u\u0000"+
		"\u0000Z[\u0005e\u0000\u0000[\\\u0005l\u0000\u0000\\^\u0005a\u0000\u0000"+
		"]N\u0001\u0000\u0000\u0000]S\u0001\u0000\u0000\u0000]X\u0001\u0000\u0000"+
		"\u0000^\b\u0001\u0000\u0000\u0000_`\u0005e\u0000\u0000`r\u0005n\u0000"+
		"\u0000ab\u0005s\u0000\u0000bc\u0005o\u0000\u0000cd\u0005b\u0000\u0000"+
		"de\u0005r\u0000\u0000er\u0005e\u0000\u0000fg\u0005c\u0000\u0000gh\u0005"+
		"e\u0000\u0000hi\u0005r\u0000\u0000ij\u0005c\u0000\u0000jr\u0005a\u0000"+
		"\u0000kl\u0005d\u0000\u0000lm\u0005e\u0000\u0000mn\u0005b\u0000\u0000"+
		"no\u0005a\u0000\u0000op\u0005j\u0000\u0000pr\u0005o\u0000\u0000q_\u0001"+
		"\u0000\u0000\u0000qa\u0001\u0000\u0000\u0000qf\u0001\u0000\u0000\u0000"+
		"qk\u0001\u0000\u0000\u0000r\n\u0001\u0000\u0000\u0000st\u0005r\u0000\u0000"+
		"tu\u0005\u00c3\u0000\u0000uv\u0005\u00a1\u0000\u0000vw\u0005p\u0000\u0000"+
		"wx\u0005i\u0000\u0000xy\u0005d\u0000\u0000yz\u0005a\u0000\u0000z{\u0005"+
		"m\u0000\u0000{|\u0005e\u0000\u0000|}\u0005n\u0000\u0000}~\u0005t\u0000"+
		"\u0000~\u0096\u0005e\u0000\u0000\u007f\u0080\u0005l\u0000\u0000\u0080"+
		"\u0081\u0005e\u0000\u0000\u0081\u0082\u0005n\u0000\u0000\u0082\u0083\u0005"+
		"t\u0000\u0000\u0083\u0084\u0005a\u0000\u0000\u0084\u0085\u0005m\u0000"+
		"\u0000\u0085\u0086\u0005e\u0000\u0000\u0086\u0087\u0005n\u0000\u0000\u0087"+
		"\u0088\u0005t\u0000\u0000\u0088\u0096\u0005e\u0000\u0000\u0089\u008a\u0005"+
		"g\u0000\u0000\u008a\u008b\u0005r\u0000\u0000\u008b\u008c\u0005\u00c3\u0000"+
		"\u0000\u008c\u008d\u0005\u00a1\u0000\u0000\u008d\u008e\u0005c\u0000\u0000"+
		"\u008e\u008f\u0005i\u0000\u0000\u008f\u0090\u0005l\u0000\u0000\u0090\u0091"+
		"\u0005m\u0000\u0000\u0091\u0092\u0005e\u0000\u0000\u0092\u0093\u0005n"+
		"\u0000\u0000\u0093\u0094\u0005t\u0000\u0000\u0094\u0096\u0005e\u0000\u0000"+
		"\u0095s\u0001\u0000\u0000\u0000\u0095\u007f\u0001\u0000\u0000\u0000\u0095"+
		"\u0089\u0001\u0000\u0000\u0000\u0096\f\u0001\u0000\u0000\u0000\u0097\u0098"+
		"\u0005m\u0000\u0000\u0098\u009e\u0005i\u0000\u0000\u0099\u009a\u0005t"+
		"\u0000\u0000\u009a\u009e\u0005u\u0000\u0000\u009b\u009c\u0005s\u0000\u0000"+
		"\u009c\u009e\u0005u\u0000\u0000\u009d\u0097\u0001\u0000\u0000\u0000\u009d"+
		"\u0099\u0001\u0000\u0000\u0000\u009d\u009b\u0001\u0000\u0000\u0000\u009e"+
		"\u000e\u0001\u0000\u0000\u0000\u009f\u00a0\u0005u\u0000\u0000\u00a0\u00a1"+
		"\u0005n\u0000\u0000\u00a1\u00b0\u0005o\u0000\u0000\u00a2\u00a3\u0005d"+
		"\u0000\u0000\u00a3\u00a4\u0005o\u0000\u0000\u00a4\u00b0\u0005s\u0000\u0000"+
		"\u00a5\u00a6\u0005t\u0000\u0000\u00a6\u00a7\u0005r\u0000\u0000\u00a7\u00a8"+
		"\u0005e\u0000\u0000\u00a8\u00b0\u0005s\u0000\u0000\u00a9\u00aa\u0005c"+
		"\u0000\u0000\u00aa\u00ab\u0005u\u0000\u0000\u00ab\u00ac\u0005a\u0000\u0000"+
		"\u00ac\u00ad\u0005t\u0000\u0000\u00ad\u00ae\u0005r\u0000\u0000\u00ae\u00b0"+
		"\u0005o\u0000\u0000\u00af\u009f\u0001\u0000\u0000\u0000\u00af\u00a2\u0001"+
		"\u0000\u0000\u0000\u00af\u00a5\u0001\u0000\u0000\u0000\u00af\u00a9\u0001"+
		"\u0000\u0000\u0000\u00b0\u0010\u0001\u0000\u0000\u0000\u00b1\u00b2\u0007"+
		"\u0000\u0000\u0000\u00b2\u0012\u0001\u0000\u0000\u0000\u00b3\u00b5\u0007"+
		"\u0001\u0000\u0000\u00b4\u00b3\u0001\u0000\u0000\u0000\u00b5\u00b6\u0001"+
		"\u0000\u0000\u0000\u00b6\u00b4\u0001\u0000\u0000\u0000\u00b6\u00b7\u0001"+
		"\u0000\u0000\u0000\u00b7\u00b8\u0001\u0000\u0000\u0000\u00b8\u00b9\u0006"+
		"\t\u0000\u0000\u00b9\u0014\u0001\u0000\u0000\u0000\n\u0000\u001e6L]q\u0095"+
		"\u009d\u00af\u00b6\u0001\u0006\u0000\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}